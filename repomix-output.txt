This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: client
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
client/
  index.html
  main.js
  package.json

================================================================
Files
================================================================

================
File: client/package.json
================
{
  "name": "client",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "phaser": "^3.90.0",
    "socket.io-client": "^4.8.1"
  }
}

================
File: client/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Space Game</title>
  <script src="https://cdn.jsdelivr.net/npm/phaser@3.80.1/dist/phaser.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/socket.io-client@4.7.5/dist/socket.io.min.js"></script>
  <style>
    body { margin: 0; background: black; color: white; font-family: Arial; }
    #login { position: absolute; top: 20px; left: 20px; z-index: 10; }
    #chat { position: absolute; bottom: 20px; left: 20px; width: 300px; height: 200px; background: rgba(0,0,0,0.8); padding: 10px; z-index: 10; display: none; }
    #messages { height: 150px; overflow-y: scroll; }
    #chat input { width: 200px; }
    #game-container { display: none; }
  </style>
</head>
<body>
  <div id="login">
    <input id="username" placeholder="Username" />
    <input id="password" type="password" placeholder="Password" />
    <button onclick="register()">Register</button>
    <button onclick="login()">Login</button>
  </div>
  <div id="chat">
    <div id="messages"></div>
    <input id="message" placeholder="Type message..." />
    <button onclick="sendGlobalChat()">Send Global</button>
    <!-- Add buttons for alliance/DM later -->
  </div>
  <div id="game-container"></div>
  <script src="main.js"></script>
</body>
</html>

================
File: client/main.js
================
let socket; // Make socket global

function register() {
  const username = document.getElementById('username').value;
  const password = document.getElementById('password').value;
  fetch('https://orange-halibut-9675jr46x9h799j-3000.app.github.dev/register', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ username, password })
  }).then(res => res.json()).then(data => {
    if (data.token) {
      localStorage.setItem('token', data.token);
      initGame();
    } else alert(data.error);
  });
}

function login() {
  const username = document.getElementById('username').value;
  const password = document.getElementById('password').value;
  fetch('https://orange-halibut-9675jr46x9h799j-3000.app.github.dev/login', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ username, password })
  }).then(res => res.json()).then(data => {
    if (data.token) {
      localStorage.setItem('token', data.token);
      initGame();
    } else alert(data.error);
  });
}

function initGame() {
  document.getElementById('login').style.display = 'none';
  document.getElementById('chat').style.display = 'block';

  // Create socket with auth
  socket = io('https://orange-halibut-9675jr46x9h799j-3000.app.github.dev/', {
    auth: { token: localStorage.getItem('token') }
  });

  socket.on('connect_error', (err) => {
    alert('Connection error: ' + err.message); // Show alert on connect error
    console.error('Socket connect error:', err.message); // For debugging
  });

  socket.on('connect', () => {
    console.log('Socket connected successfully');
  });

  // Moved Phaser code inside initGame
  class GalaxyScene extends Phaser.Scene {
    constructor() {
      super('Galaxy');
    }

    preload() {
      // Load backgrounds or node icons if needed
      this.load.image('destroyer', 'assets/destroyer.png'); // Preload destroyer globally
    }

    create() {
      // Draw starry background
      this.add.image(0, 0, 'stars').setOrigin(0,0).setScale(2); // Placeholder - add asset later

      // Placeholder systems: Hardcode 5 nodes for test
      const systems = [
        { id: '1', x: 200, y: 200, name: 'Safe Zone' },
        { id: '2', x: 400, y: 300, name: 'Mining Zone' },
        // Add 3 more...
      ];

      const graphics = this.add.graphics({ lineStyle: { width: 2, color: 0xffffff } });
      // Draw connections (lines)
      graphics.lineBetween(200, 200, 400, 300); // Example connection

      // Draw clickable nodes
      systems.forEach(sys => {
        const node = this.add.circle(sys.x, sys.y, 20, 0x00ff00).setInteractive();
        this.add.text(sys.x, sys.y + 30, sys.name, { fontSize: 16 });
        node.on('pointerdown', () => {
          // Start SystemScene first
          this.scene.start('System');
          // Wait for SystemScene to be created, then emit joinSystem
          this.scene.get('System').events.once('create', () => {
            socket.emit('joinSystem', sys.id);
          });
        });
      });

      // Zoom (wheel input)
      this.input.on('wheel', (pointer, gameObjects, deltaX, deltaY, deltaZ) => {
        const zoom = this.cameras.main.zoom - deltaY * 0.001;
        this.cameras.main.setZoom(Phaser.Math.Clamp(zoom, 0.5, 2)); // Clamp min/max
        pointer.event.preventDefault(); // Stop page scroll
      });
      this.input.keyboard.enabled = false; // Optional if keys
    }
  }

  class SystemScene extends Phaser.Scene {
    constructor() {
      super('System');
    }

    preload() {
      // No need to load 'destroyer' again, loaded in GalaxyScene
    }

    create() {
      this.otherShips = new Map();

      // Background
      this.add.image(400, 300, 'stars').setOrigin(0.5);

      // Player ship
      this.playerShip = this.add.sprite(400, 300, 'destroyer').setScale(0.1).setInteractive();
      this.playerShip.setDepth(1);

      // Health bar function
      function updateHealthBar(bar, x, y, shield, armor) {
        bar.clear();
        bar.fillStyle(0x00ff00, 1);
        bar.fillRect(x - 25, y - 30, 50 * (shield / 100), 5); // Green for shield, positioned above
        bar.fillStyle(0xff0000, 1);
        bar.fillRect(x - 25, y - 25, 50 * (armor / 100), 5); // Red for armor, positioned above
      }

      this.playerHealthBar = this.add.graphics();
      updateHealthBar(this.playerHealthBar, this.playerShip.x, this.playerShip.y, 100, 100);

      // Update health bar position each frame for player and others
      this.events.on('update', () => {
        updateHealthBar(this.playerHealthBar, this.playerShip.x, this.playerShip.y, 100, 100);
        this.otherShips.forEach((ship) => {
          updateHealthBar(
            ship.healthBar,
            ship.x,
            ship.y,
            ship.shield || 100,
            ship.armor || 100
          );
        });
      });

      // System data (set own pos and create existing)
      socket.on('systemData', (data) => {
        this.playerShip.setPosition(data.myPos.x, data.myPos.y);
        updateHealthBar(this.playerHealthBar, this.playerShip.x, this.playerShip.y, 100, 100);
        data.existingPlayers.forEach(p => {
          if (!this.otherShips.has(p.id)) {
            const otherShip = this.add.sprite(p.x, p.y, 'destroyer').setScale(0.1);
            otherShip.healthBar = this.add.graphics();
            updateHealthBar(otherShip.healthBar, p.x, p.y, p.shield || 100, p.armor || 100);
            this.otherShips.set(p.id, otherShip);
          }
        });
        // Mining nodes
        data.resources.forEach(r => {
          const node = this.add.circle(r.position.x, r.position.y, 30, 0xffff00).setInteractive();
          node.on('pointerdown', () => {
            socket.emit('startMining', { nodeId: r.id });
            // Start local mining progress bar
            const progressBar = this.add.graphics();
            progressBar.fillStyle(0x00ff00, 1);
            progressBar.fillRect(r.position.x - 25, r.position.y - 40, 0, 5); // Initial empty

            // Phaser timer event for 10s mining
            const timer = this.time.addEvent({
              delay: 10000,
              callback: () => {
                progressBar.destroy();
              },
              loop: false
            });

            // Progress bar update on each frame
            const updateProgress = () => {
              if (!progressBar.scene) return; // If destroyed, stop
              const progress = 1 - (timer.getRemaining() / 10000);
              progressBar.clear();
              progressBar.fillStyle(0x00ff00, 1);
              progressBar.fillRect(r.position.x - 25, r.position.y - 40, 50 * progress, 5);
              if (progress < 1) {
                progressBar.scene.time.delayedCall(16, updateProgress); // ~60fps
              }
            };
            updateProgress();
          });
        });
      });

      // Player entered
      socket.on('playerEntered', (data) => {
        if (!this.otherShips.has(data.id)) {
          const otherShip = this.add.sprite(data.x, data.y, 'destroyer').setScale(0.1);
          otherShip.healthBar = this.add.graphics();
          updateHealthBar(otherShip.healthBar, data.x, data.y, data.shield || 100, data.armor || 100);
          this.otherShips.set(data.id, otherShip);
        }
      });

      // Player start move
      socket.on('playerStartMove', (data) => {
        const otherShip = this.otherShips.get(data.id);
        if (otherShip) {
          const duration = Phaser.Math.Distance.Between(otherShip.x, otherShip.y, data.targetX, data.targetY) * 5;
          this.tweens.add({
            targets: otherShip,
            x: data.targetX,
            y: data.targetY,
            duration: duration
          });
        }
      });

      // Player moved (snap)
      socket.on('playerMoved', (data) => {
        const otherShip = this.otherShips.get(data.id);
        if (otherShip) {
          otherShip.setPosition(data.x, data.y);
          updateHealthBar(
            otherShip.healthBar,
            data.x,
            data.y,
            otherShip.shield || 100,
            otherShip.armor || 100
          );
        }
      });

      // Player left
      socket.on('playerLeft', (data) => {
        const otherShip = this.otherShips.get(data.id);
        if (otherShip) {
          otherShip.healthBar.destroy();
          otherShip.destroy();
          this.otherShips.delete(data.id);
        }
      });

      // Tap to move with drag filter
      let downX, downY;
      this.input.on('pointerdown', (pointer) => {
        downX = pointer.x;
        downY = pointer.y;
      });

      this.input.on('pointerup', (pointer) => {
        const dist = Phaser.Math.Distance.Between(downX, downY, pointer.x, pointer.y);
        if (dist < 5) {
          socket.emit('startMove', { targetX: downX, targetY: downY });
          const duration = Phaser.Math.Distance.Between(this.playerShip.x, this.playerShip.y, downX, downY) * 5;
          this.tweens.add({
            targets: this.playerShip,
            x: downX,
            y: downY,
            duration: duration,
            onComplete: () => socket.emit('move', { x: downX, y: downY })
          });
        }
      });

      // Attack on ship click
      this.input.on('gameobjectdown', (pointer, gameObject) => {
        console.log('Clicked game object:', gameObject.id); // Log to confirm click
        if (this.otherShips.has(gameObject.id)) {
          this.selectedTarget = gameObject.id;
          socket.emit('attack', { targetId: this.selectedTarget });
          console.log('Emitting attack on target:', this.selectedTarget); // Log emit
        } else {
          console.log('No valid target for attack');
        }
      });

      // Handle attacked event and update health bars
      socket.on('attacked', (data) => {
        console.log('Received attacked:', data); // Log for debug
        const ship = data.targetId === socket.id ? this.playerShip : this.otherShips.get(data.targetId);
        if (ship) {
          ship.shield = (ship.shield || 100) - data.damage;
          if (ship.shield < 0) {
            ship.armor = (ship.armor || 100) + ship.shield;
            ship.shield = 0;
            if (ship.armor <= 0) {
              // Handle destruction
              console.log('Ship destroyed');
            }
          }
          updateHealthBar(ship.healthBar, ship.x, ship.y, ship.shield, ship.armor);
        }
      });

      // Handle destroyed event for player
      socket.on('destroyed', () => {
        alert('Your ship was destroyed! Respawning in safe zone.');
        // Optionally reload scene or move player
      });
    }

    shutdown() {
      this.otherShips.forEach(ship => ship.destroy());
      this.otherShips.clear();
      socket.off('playerEntered');
      socket.off('playerMoved');
      socket.off('playerStartMove');
      socket.off('playerLeft');
      socket.off('systemData');
      socket.off('attacked');
      socket.off('destroyed');
    }
  }

  const config = {
    type: Phaser.AUTO,
    width: window.innerWidth,
    height: window.innerHeight,
    scene: [GalaxyScene, SystemScene],
    parent: 'game-container' // Changed from 'phaser-container'
  };

  socket.auth = { token: localStorage.getItem('token') };
  socket.connect();

  socket.on('chatHistory', (data) => {
    console.log('Received chatHistory:', data.type, data.messages.length, 'messages');
    const messagesDiv = document.getElementById('messages');
    data.messages.forEach(msg => {
      messagesDiv.innerHTML += `<p>[${data.type}] ${msg.from}: ${msg.message}</p>`;
    });
  });

  socket.on('newChat', (data) => {
    const messagesDiv = document.getElementById('messages');
    messagesDiv.innerHTML += `<p>[${data.type}] ${data.from}: ${data.message}</p>`;
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
  });

  socket.on('miningComplete', (data) => {
    console.log('Mining complete:', data.minerals, 'minerals');
    alert('Mined ' + data.minerals + ' minerals!');
  });

  const game = new Phaser.Game(config);

  // Show game container after game starts
  document.getElementById('game-container').style.display = 'block';
}

function sendGlobalChat() {
  const message = document.getElementById('message').value;
  socket.emit('sendChat', { type: 'global', message });
  document.getElementById('message').value = '';
}




================================================================
End of Codebase
================================================================
